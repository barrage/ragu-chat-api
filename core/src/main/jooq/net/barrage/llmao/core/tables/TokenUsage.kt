/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.core.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.barrage.llmao.core.Public
import net.barrage.llmao.core.indexes.TOKEN_USAGE_MODEL_IDX
import net.barrage.llmao.core.indexes.TOKEN_USAGE_PROVIDER_IDX
import net.barrage.llmao.core.indexes.TOKEN_USAGE_USAGE_TYPE_IDX
import net.barrage.llmao.core.indexes.TOKEN_USAGE_USER_ID_IDX
import net.barrage.llmao.core.indexes.TOKEN_USAGE_WORKFLOW_ID_IDX
import net.barrage.llmao.core.indexes.TOKEN_USAGE_WORKFLOW_TYPE_IDX
import net.barrage.llmao.core.keys.TOKEN_USAGE_PKEY
import net.barrage.llmao.core.tables.records.TokenUsageRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class TokenUsage(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TokenUsageRecord>?,
    parentPath: InverseForeignKey<out Record, TokenUsageRecord>?,
    aliased: Table<TokenUsageRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TokenUsageRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.token_usage</code>
         */
        val TOKEN_USAGE: TokenUsage = TokenUsage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TokenUsageRecord> = TokenUsageRecord::class.java

    /**
     * The column <code>public.token_usage.id</code>.
     */
    val ID: TableField<TokenUsageRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.token_usage.workflow_id</code>.
     */
    val WORKFLOW_ID: TableField<TokenUsageRecord, UUID?> = createField(DSL.name("workflow_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.token_usage.workflow_type</code>.
     */
    val WORKFLOW_TYPE: TableField<TokenUsageRecord, String?> = createField(DSL.name("workflow_type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.token_usage.user_id</code>.
     */
    val USER_ID: TableField<TokenUsageRecord, String?> = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.token_usage.username</code>.
     */
    val USERNAME: TableField<TokenUsageRecord, String?> = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.token_usage.prompt_tokens_amount</code>.
     */
    val PROMPT_TOKENS_AMOUNT: TableField<TokenUsageRecord, Int?> = createField(DSL.name("prompt_tokens_amount"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.token_usage.completion_tokens_amount</code>.
     */
    val COMPLETION_TOKENS_AMOUNT: TableField<TokenUsageRecord, Int?> = createField(DSL.name("completion_tokens_amount"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.token_usage.total_tokens_amount</code>.
     */
    val TOTAL_TOKENS_AMOUNT: TableField<TokenUsageRecord, Int?> = createField(DSL.name("total_tokens_amount"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.token_usage.usage_type</code>.
     */
    val USAGE_TYPE: TableField<TokenUsageRecord, String?> = createField(DSL.name("usage_type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.token_usage.model</code>.
     */
    val MODEL: TableField<TokenUsageRecord, String?> = createField(DSL.name("model"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.token_usage.provider</code>.
     */
    val PROVIDER: TableField<TokenUsageRecord, String?> = createField(DSL.name("provider"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.token_usage.note</code>.
     */
    val NOTE: TableField<TokenUsageRecord, String?> = createField(DSL.name("note"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.token_usage.created_at</code>.
     */
    val CREATED_AT: TableField<TokenUsageRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<TokenUsageRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TokenUsageRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TokenUsageRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.token_usage</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.token_usage</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.token_usage</code> table reference
     */
    constructor(): this(DSL.name("token_usage"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(TOKEN_USAGE_MODEL_IDX, TOKEN_USAGE_PROVIDER_IDX, TOKEN_USAGE_USAGE_TYPE_IDX, TOKEN_USAGE_USER_ID_IDX, TOKEN_USAGE_WORKFLOW_ID_IDX, TOKEN_USAGE_WORKFLOW_TYPE_IDX)
    override fun getIdentity(): Identity<TokenUsageRecord, Int?> = super.getIdentity() as Identity<TokenUsageRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TokenUsageRecord> = TOKEN_USAGE_PKEY
    override fun `as`(alias: String): TokenUsage = TokenUsage(DSL.name(alias), this)
    override fun `as`(alias: Name): TokenUsage = TokenUsage(alias, this)
    override fun `as`(alias: Table<*>): TokenUsage = TokenUsage(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TokenUsage = TokenUsage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TokenUsage = TokenUsage(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TokenUsage = TokenUsage(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TokenUsage = TokenUsage(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TokenUsage = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TokenUsage = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TokenUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TokenUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TokenUsage = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TokenUsage = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TokenUsage = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TokenUsage = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TokenUsage = where(DSL.notExists(select))
}
