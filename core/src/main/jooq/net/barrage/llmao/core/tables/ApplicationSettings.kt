/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.core.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import net.barrage.llmao.core.Public
import net.barrage.llmao.core.indexes.APPLICATION_SETTINGS_NAME_IDX
import net.barrage.llmao.core.keys.APPLICATION_SETTINGS_PKEY
import net.barrage.llmao.core.tables.records.ApplicationSettingsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class ApplicationSettings(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ApplicationSettingsRecord>?,
    parentPath: InverseForeignKey<out Record, ApplicationSettingsRecord>?,
    aliased: Table<ApplicationSettingsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ApplicationSettingsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.application_settings</code>
         */
        val APPLICATION_SETTINGS: ApplicationSettings = ApplicationSettings()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ApplicationSettingsRecord> = ApplicationSettingsRecord::class.java

    /**
     * The column <code>public.application_settings.name</code>.
     */
    val NAME: TableField<ApplicationSettingsRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.application_settings.value</code>.
     */
    val VALUE: TableField<ApplicationSettingsRecord, String?> = createField(DSL.name("value"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.application_settings.created_at</code>.
     */
    val CREATED_AT: TableField<ApplicationSettingsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.application_settings.updated_at</code>.
     */
    val UPDATED_AT: TableField<ApplicationSettingsRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<ApplicationSettingsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ApplicationSettingsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ApplicationSettingsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.application_settings</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.application_settings</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.application_settings</code> table reference
     */
    constructor(): this(DSL.name("application_settings"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(APPLICATION_SETTINGS_NAME_IDX)
    override fun getPrimaryKey(): UniqueKey<ApplicationSettingsRecord> = APPLICATION_SETTINGS_PKEY
    override fun `as`(alias: String): ApplicationSettings = ApplicationSettings(DSL.name(alias), this)
    override fun `as`(alias: Name): ApplicationSettings = ApplicationSettings(alias, this)
    override fun `as`(alias: Table<*>): ApplicationSettings = ApplicationSettings(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ApplicationSettings = ApplicationSettings(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ApplicationSettings = ApplicationSettings(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ApplicationSettings = ApplicationSettings(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ApplicationSettings = ApplicationSettings(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ApplicationSettings = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ApplicationSettings = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ApplicationSettings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ApplicationSettings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ApplicationSettings = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ApplicationSettings = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ApplicationSettings = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ApplicationSettings = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ApplicationSettings = where(DSL.notExists(select))
}
