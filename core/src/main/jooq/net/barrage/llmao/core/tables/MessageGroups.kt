/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.core.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.barrage.llmao.core.Public
import net.barrage.llmao.core.indexes.MESSAGE_GROUPS_PARENT_ID_IDX
import net.barrage.llmao.core.keys.MESSAGES__MESSAGES_MESSAGE_GROUP_ID_FKEY
import net.barrage.llmao.core.keys.MESSAGE_GROUPS_PKEY
import net.barrage.llmao.core.keys.MESSAGE_GROUP_EVALUATIONS__MESSAGE_GROUP_EVALUATIONS_MESSAGE_GROUP_ID_FKEY
import net.barrage.llmao.core.tables.MessageGroupEvaluations.MessageGroupEvaluationsPath
import net.barrage.llmao.core.tables.Messages.MessagesPath
import net.barrage.llmao.core.tables.records.MessageGroupsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class MessageGroups(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, MessageGroupsRecord>?,
    parentPath: InverseForeignKey<out Record, MessageGroupsRecord>?,
    aliased: Table<MessageGroupsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<MessageGroupsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.message_groups</code>
         */
        val MESSAGE_GROUPS: MessageGroups = MessageGroups()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MessageGroupsRecord> = MessageGroupsRecord::class.java

    /**
     * The column <code>public.message_groups.id</code>.
     */
    val ID: TableField<MessageGroupsRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.message_groups.parent_id</code>.
     */
    val PARENT_ID: TableField<MessageGroupsRecord, UUID?> = createField(DSL.name("parent_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.message_groups.parent_type</code>.
     */
    val PARENT_TYPE: TableField<MessageGroupsRecord, String?> = createField(DSL.name("parent_type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.message_groups.created_at</code>.
     */
    val CREATED_AT: TableField<MessageGroupsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<MessageGroupsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<MessageGroupsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<MessageGroupsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.message_groups</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.message_groups</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.message_groups</code> table reference
     */
    constructor(): this(DSL.name("message_groups"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MessageGroupsRecord>?, parentPath: InverseForeignKey<out Record, MessageGroupsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MESSAGE_GROUPS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class MessageGroupsPath : MessageGroups, Path<MessageGroupsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MessageGroupsRecord>?, parentPath: InverseForeignKey<out Record, MessageGroupsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<MessageGroupsRecord>): super(alias, aliased)
        override fun `as`(alias: String): MessageGroupsPath = MessageGroupsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): MessageGroupsPath = MessageGroupsPath(alias, this)
        override fun `as`(alias: Table<*>): MessageGroupsPath = MessageGroupsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(MESSAGE_GROUPS_PARENT_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<MessageGroupsRecord> = MESSAGE_GROUPS_PKEY

    private lateinit var _messageGroupEvaluations: MessageGroupEvaluationsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.message_group_evaluations</code> table
     */
    fun messageGroupEvaluations(): MessageGroupEvaluationsPath {
        if (!this::_messageGroupEvaluations.isInitialized)
            _messageGroupEvaluations = MessageGroupEvaluationsPath(this, null, MESSAGE_GROUP_EVALUATIONS__MESSAGE_GROUP_EVALUATIONS_MESSAGE_GROUP_ID_FKEY.inverseKey)

        return _messageGroupEvaluations;
    }

    val messageGroupEvaluations: MessageGroupEvaluationsPath
        get(): MessageGroupEvaluationsPath = messageGroupEvaluations()

    private lateinit var _messages: MessagesPath

    /**
     * Get the implicit to-many join path to the <code>public.messages</code>
     * table
     */
    fun messages(): MessagesPath {
        if (!this::_messages.isInitialized)
            _messages = MessagesPath(this, null, MESSAGES__MESSAGES_MESSAGE_GROUP_ID_FKEY.inverseKey)

        return _messages;
    }

    val messages: MessagesPath
        get(): MessagesPath = messages()
    override fun `as`(alias: String): MessageGroups = MessageGroups(DSL.name(alias), this)
    override fun `as`(alias: Name): MessageGroups = MessageGroups(alias, this)
    override fun `as`(alias: Table<*>): MessageGroups = MessageGroups(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): MessageGroups = MessageGroups(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): MessageGroups = MessageGroups(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): MessageGroups = MessageGroups(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): MessageGroups = MessageGroups(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): MessageGroups = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): MessageGroups = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): MessageGroups = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): MessageGroups = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): MessageGroups = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): MessageGroups = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): MessageGroups = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): MessageGroups = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): MessageGroups = where(DSL.notExists(select))
}
