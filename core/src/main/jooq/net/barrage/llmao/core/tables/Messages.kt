/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.core.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.barrage.llmao.core.Public
import net.barrage.llmao.core.indexes.MESSAGES_MESSAGE_GROUP_ID_IDX
import net.barrage.llmao.core.keys.MESSAGES_PKEY
import net.barrage.llmao.core.keys.MESSAGES__MESSAGES_MESSAGE_GROUP_ID_FKEY
import net.barrage.llmao.core.keys.MESSAGE_ATTACHMENTS__MESSAGE_ATTACHMENTS_MESSAGE_ID_FKEY
import net.barrage.llmao.core.tables.MessageAttachments.MessageAttachmentsPath
import net.barrage.llmao.core.tables.MessageGroups.MessageGroupsPath
import net.barrage.llmao.core.tables.records.MessagesRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Messages(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, MessagesRecord>?,
    parentPath: InverseForeignKey<out Record, MessagesRecord>?,
    aliased: Table<MessagesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<MessagesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.messages</code>
         */
        val MESSAGES: Messages = Messages()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<MessagesRecord> = MessagesRecord::class.java

    /**
     * The column <code>public.messages.id</code>.
     */
    val ID: TableField<MessagesRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.messages.message_group_id</code>.
     */
    val MESSAGE_GROUP_ID: TableField<MessagesRecord, UUID?> = createField(DSL.name("message_group_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.messages.order</code>.
     */
    val ORDER: TableField<MessagesRecord, Int?> = createField(DSL.name("order"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.messages.sender_type</code>.
     */
    val SENDER_TYPE: TableField<MessagesRecord, String?> = createField(DSL.name("sender_type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.messages.content</code>.
     */
    val CONTENT: TableField<MessagesRecord, String?> = createField(DSL.name("content"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.messages.finish_reason</code>.
     */
    val FINISH_REASON: TableField<MessagesRecord, String?> = createField(DSL.name("finish_reason"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.messages.tool_calls</code>.
     */
    val TOOL_CALLS: TableField<MessagesRecord, String?> = createField(DSL.name("tool_calls"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.messages.tool_call_id</code>.
     */
    val TOOL_CALL_ID: TableField<MessagesRecord, String?> = createField(DSL.name("tool_call_id"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.messages.created_at</code>.
     */
    val CREATED_AT: TableField<MessagesRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<MessagesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<MessagesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<MessagesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.messages</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.messages</code> table reference
     */
    constructor(): this(DSL.name("messages"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MessagesRecord>?, parentPath: InverseForeignKey<out Record, MessagesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MESSAGES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class MessagesPath : Messages, Path<MessagesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, MessagesRecord>?, parentPath: InverseForeignKey<out Record, MessagesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<MessagesRecord>): super(alias, aliased)
        override fun `as`(alias: String): MessagesPath = MessagesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): MessagesPath = MessagesPath(alias, this)
        override fun `as`(alias: Table<*>): MessagesPath = MessagesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(MESSAGES_MESSAGE_GROUP_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<MessagesRecord> = MESSAGES_PKEY
    override fun getReferences(): List<ForeignKey<MessagesRecord, *>> = listOf(MESSAGES__MESSAGES_MESSAGE_GROUP_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.message_groups</code>
     * table.
     */
    fun messageGroups(): MessageGroupsPath = messageGroups
    val messageGroups: MessageGroupsPath by lazy { MessageGroupsPath(this, MESSAGES__MESSAGES_MESSAGE_GROUP_ID_FKEY, null) }

    private lateinit var _messageAttachments: MessageAttachmentsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.message_attachments</code> table
     */
    fun messageAttachments(): MessageAttachmentsPath {
        if (!this::_messageAttachments.isInitialized)
            _messageAttachments = MessageAttachmentsPath(this, null, MESSAGE_ATTACHMENTS__MESSAGE_ATTACHMENTS_MESSAGE_ID_FKEY.inverseKey)

        return _messageAttachments;
    }

    val messageAttachments: MessageAttachmentsPath
        get(): MessageAttachmentsPath = messageAttachments()
    override fun `as`(alias: String): Messages = Messages(DSL.name(alias), this)
    override fun `as`(alias: Name): Messages = Messages(alias, this)
    override fun `as`(alias: Table<*>): Messages = Messages(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Messages = Messages(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Messages = Messages(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Messages = Messages(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Messages = Messages(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Messages = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Messages = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Messages = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Messages = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Messages = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Messages = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Messages = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Messages = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Messages = where(DSL.notExists(select))
}
