/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.bonvoyage.tables


import java.time.LocalDate
import java.time.OffsetDateTime
import java.time.OffsetTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.barrage.llmao.bonvoyage.Public
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRIPS_END_DATE_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRIPS_END_REMINDER_SENT_AT_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRIPS_START_DATE_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRIPS_START_REMINDER_SENT_AT_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRIPS_TRAVEL_ORDER_ID_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRIPS_USER_ID_IDX
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRAVEL_EXPENSES__BONVOYAGE_TRAVEL_EXPENSES_TRIP_ID_FKEY
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRAVEL_REQUESTS__BONVOYAGE_TRAVEL_REQUESTS_TRIP_ID_FKEY
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRIPS_PKEY
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRIP_WELCOME_MESSAGES__BONVOYAGE_TRIP_WELCOME_MESSAGES_TRIP_ID_FKEY
import net.barrage.llmao.bonvoyage.tables.BonvoyageTravelExpenses.BonvoyageTravelExpensesPath
import net.barrage.llmao.bonvoyage.tables.BonvoyageTravelRequests.BonvoyageTravelRequestsPath
import net.barrage.llmao.bonvoyage.tables.BonvoyageTripWelcomeMessages.BonvoyageTripWelcomeMessagesPath
import net.barrage.llmao.bonvoyage.tables.records.BonvoyageTripsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class BonvoyageTrips(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BonvoyageTripsRecord>?,
    parentPath: InverseForeignKey<out Record, BonvoyageTripsRecord>?,
    aliased: Table<BonvoyageTripsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BonvoyageTripsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.bonvoyage_trips</code>
         */
        val BONVOYAGE_TRIPS: BonvoyageTrips = BonvoyageTrips()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BonvoyageTripsRecord> = BonvoyageTripsRecord::class.java

    /**
     * The column <code>public.bonvoyage_trips.id</code>.
     */
    val ID: TableField<BonvoyageTripsRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.bonvoyage_trips.travel_order_id</code>.
     */
    val TRAVEL_ORDER_ID: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("travel_order_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.user_id</code>.
     */
    val USER_ID: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.user_full_name</code>.
     */
    val USER_FULL_NAME: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("user_full_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.user_email</code>.
     */
    val USER_EMAIL: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("user_email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.start_location</code>.
     */
    val START_LOCATION: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("start_location"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.stops</code>.
     */
    val STOPS: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("stops"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.end_location</code>.
     */
    val END_LOCATION: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("end_location"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.transport_type</code>.
     */
    val TRANSPORT_TYPE: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("transport_type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.description</code>.
     */
    val DESCRIPTION: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.start_date</code>.
     */
    val START_DATE: TableField<BonvoyageTripsRecord, LocalDate?> = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.end_date</code>.
     */
    val END_DATE: TableField<BonvoyageTripsRecord, LocalDate?> = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.start_reminder_time</code>.
     */
    val START_REMINDER_TIME: TableField<BonvoyageTripsRecord, OffsetTime?> = createField(DSL.name("start_reminder_time"), SQLDataType.TIMEWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.bonvoyage_trips.end_reminder_time</code>.
     */
    val END_REMINDER_TIME: TableField<BonvoyageTripsRecord, OffsetTime?> = createField(DSL.name("end_reminder_time"), SQLDataType.TIMEWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.bonvoyage_trips.start_reminder_sent_at</code>.
     */
    val START_REMINDER_SENT_AT: TableField<BonvoyageTripsRecord, OffsetDateTime?> = createField(DSL.name("start_reminder_sent_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.bonvoyage_trips.end_reminder_sent_at</code>.
     */
    val END_REMINDER_SENT_AT: TableField<BonvoyageTripsRecord, OffsetDateTime?> = createField(DSL.name("end_reminder_sent_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.bonvoyage_trips.start_time</code>.
     */
    val START_TIME: TableField<BonvoyageTripsRecord, OffsetTime?> = createField(DSL.name("start_time"), SQLDataType.TIMEWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.bonvoyage_trips.end_time</code>.
     */
    val END_TIME: TableField<BonvoyageTripsRecord, OffsetTime?> = createField(DSL.name("end_time"), SQLDataType.TIMEWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.bonvoyage_trips.version_sent</code>.
     */
    val VERSION_SENT: TableField<BonvoyageTripsRecord, Int?> = createField(DSL.name("version_sent"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.bonvoyage_trips.version</code>.
     */
    val VERSION: TableField<BonvoyageTripsRecord, Int?> = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.bonvoyage_trips.created_at</code>.
     */
    val CREATED_AT: TableField<BonvoyageTripsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.bonvoyage_trips.updated_at</code>.
     */
    val UPDATED_AT: TableField<BonvoyageTripsRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.bonvoyage_trips.created_by_id</code>.
     */
    val CREATED_BY_ID: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("created_by_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.created_by_username</code>.
     */
    val CREATED_BY_USERNAME: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("created_by_username"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.created_by_email</code>.
     */
    val CREATED_BY_EMAIL: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("created_by_email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_trips.vehicle_type</code>.
     */
    val VEHICLE_TYPE: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("vehicle_type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.bonvoyage_trips.vehicle_registration</code>.
     */
    val VEHICLE_REGISTRATION: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("vehicle_registration"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.bonvoyage_trips.start_mileage</code>.
     */
    val START_MILEAGE: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("start_mileage"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.bonvoyage_trips.end_mileage</code>.
     */
    val END_MILEAGE: TableField<BonvoyageTripsRecord, String?> = createField(DSL.name("end_mileage"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.bonvoyage_trips.is_driver</code>.
     */
    val IS_DRIVER: TableField<BonvoyageTripsRecord, Boolean?> = createField(DSL.name("is_driver"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "")

    private constructor(alias: Name, aliased: Table<BonvoyageTripsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BonvoyageTripsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BonvoyageTripsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.bonvoyage_trips</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.bonvoyage_trips</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.bonvoyage_trips</code> table reference
     */
    constructor(): this(DSL.name("bonvoyage_trips"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BonvoyageTripsRecord>?, parentPath: InverseForeignKey<out Record, BonvoyageTripsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BONVOYAGE_TRIPS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BonvoyageTripsPath : BonvoyageTrips, Path<BonvoyageTripsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BonvoyageTripsRecord>?, parentPath: InverseForeignKey<out Record, BonvoyageTripsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BonvoyageTripsRecord>): super(alias, aliased)
        override fun `as`(alias: String): BonvoyageTripsPath = BonvoyageTripsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BonvoyageTripsPath = BonvoyageTripsPath(alias, this)
        override fun `as`(alias: Table<*>): BonvoyageTripsPath = BonvoyageTripsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(BONVOYAGE_TRIPS_END_DATE_IDX, BONVOYAGE_TRIPS_END_REMINDER_SENT_AT_IDX, BONVOYAGE_TRIPS_START_DATE_IDX, BONVOYAGE_TRIPS_START_REMINDER_SENT_AT_IDX, BONVOYAGE_TRIPS_TRAVEL_ORDER_ID_IDX, BONVOYAGE_TRIPS_USER_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<BonvoyageTripsRecord> = BONVOYAGE_TRIPS_PKEY

    private lateinit var _bonvoyageTravelExpenses: BonvoyageTravelExpensesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.bonvoyage_travel_expenses</code> table
     */
    fun bonvoyageTravelExpenses(): BonvoyageTravelExpensesPath {
        if (!this::_bonvoyageTravelExpenses.isInitialized)
            _bonvoyageTravelExpenses = BonvoyageTravelExpensesPath(this, null, BONVOYAGE_TRAVEL_EXPENSES__BONVOYAGE_TRAVEL_EXPENSES_TRIP_ID_FKEY.inverseKey)

        return _bonvoyageTravelExpenses;
    }

    val bonvoyageTravelExpenses: BonvoyageTravelExpensesPath
        get(): BonvoyageTravelExpensesPath = bonvoyageTravelExpenses()

    private lateinit var _bonvoyageTravelRequests: BonvoyageTravelRequestsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.bonvoyage_travel_requests</code> table
     */
    fun bonvoyageTravelRequests(): BonvoyageTravelRequestsPath {
        if (!this::_bonvoyageTravelRequests.isInitialized)
            _bonvoyageTravelRequests = BonvoyageTravelRequestsPath(this, null, BONVOYAGE_TRAVEL_REQUESTS__BONVOYAGE_TRAVEL_REQUESTS_TRIP_ID_FKEY.inverseKey)

        return _bonvoyageTravelRequests;
    }

    val bonvoyageTravelRequests: BonvoyageTravelRequestsPath
        get(): BonvoyageTravelRequestsPath = bonvoyageTravelRequests()

    private lateinit var _bonvoyageTripWelcomeMessages: BonvoyageTripWelcomeMessagesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.bonvoyage_trip_welcome_messages</code> table
     */
    fun bonvoyageTripWelcomeMessages(): BonvoyageTripWelcomeMessagesPath {
        if (!this::_bonvoyageTripWelcomeMessages.isInitialized)
            _bonvoyageTripWelcomeMessages = BonvoyageTripWelcomeMessagesPath(this, null, BONVOYAGE_TRIP_WELCOME_MESSAGES__BONVOYAGE_TRIP_WELCOME_MESSAGES_TRIP_ID_FKEY.inverseKey)

        return _bonvoyageTripWelcomeMessages;
    }

    val bonvoyageTripWelcomeMessages: BonvoyageTripWelcomeMessagesPath
        get(): BonvoyageTripWelcomeMessagesPath = bonvoyageTripWelcomeMessages()
    override fun `as`(alias: String): BonvoyageTrips = BonvoyageTrips(DSL.name(alias), this)
    override fun `as`(alias: Name): BonvoyageTrips = BonvoyageTrips(alias, this)
    override fun `as`(alias: Table<*>): BonvoyageTrips = BonvoyageTrips(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BonvoyageTrips = BonvoyageTrips(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BonvoyageTrips = BonvoyageTrips(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BonvoyageTrips = BonvoyageTrips(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): BonvoyageTrips = BonvoyageTrips(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): BonvoyageTrips = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): BonvoyageTrips = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): BonvoyageTrips = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): BonvoyageTrips = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): BonvoyageTrips = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): BonvoyageTrips = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): BonvoyageTrips = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): BonvoyageTrips = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): BonvoyageTrips = where(DSL.notExists(select))
}
