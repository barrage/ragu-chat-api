/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.bonvoyage.tables

import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List
import net.barrage.llmao.bonvoyage.Public
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRAVEL_EXPENSES_CREATED_AT_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRAVEL_EXPENSES_EXPENSE_CREATED_AT_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRAVEL_EXPENSES_TRIP_ID_IDX
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRAVEL_EXPENSES_PKEY
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRAVEL_EXPENSES__BONVOYAGE_TRAVEL_EXPENSES_TRIP_ID_FKEY
import net.barrage.llmao.bonvoyage.tables.BonvoyageTrips.BonvoyageTripsPath
import net.barrage.llmao.bonvoyage.tables.records.BonvoyageTravelExpensesRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("warnings")
open class BonvoyageTravelExpenses(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, BonvoyageTravelExpensesRecord>?,
  parentPath: InverseForeignKey<out Record, BonvoyageTravelExpensesRecord>?,
  aliased: Table<BonvoyageTravelExpensesRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) :
  TableImpl<BonvoyageTravelExpensesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {

    /** The reference instance of <code>public.bonvoyage_travel_expenses</code> */
    val BONVOYAGE_TRAVEL_EXPENSES: BonvoyageTravelExpenses = BonvoyageTravelExpenses()
  }

  /** The class holding records for this type */
  override fun getRecordType(): Class<BonvoyageTravelExpensesRecord> =
    BonvoyageTravelExpensesRecord::class.java

  /** The column <code>public.bonvoyage_travel_expenses.id</code>. */
  val ID: TableField<BonvoyageTravelExpensesRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false)
        .defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /** The column <code>public.bonvoyage_travel_expenses.trip_id</code>. */
  val TRIP_ID: TableField<BonvoyageTravelExpensesRecord, UUID?> =
    createField(DSL.name("trip_id"), SQLDataType.UUID.nullable(false), this, "")

  /** The column <code>public.bonvoyage_travel_expenses.message_group_id</code>. */
  val MESSAGE_GROUP_ID: TableField<BonvoyageTravelExpensesRecord, UUID?> =
    createField(DSL.name("message_group_id"), SQLDataType.UUID.nullable(false), this, "")

  /** The column <code>public.bonvoyage_travel_expenses.amount</code>. */
  val AMOUNT: TableField<BonvoyageTravelExpensesRecord, Double?> =
    createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "")

  /** The column <code>public.bonvoyage_travel_expenses.currency</code>. */
  val CURRENCY: TableField<BonvoyageTravelExpensesRecord, String?> =
    createField(DSL.name("currency"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.bonvoyage_travel_expenses.image_path</code>. */
  val IMAGE_PATH: TableField<BonvoyageTravelExpensesRecord, String?> =
    createField(DSL.name("image_path"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.bonvoyage_travel_expenses.image_provider</code>. */
  val IMAGE_PROVIDER: TableField<BonvoyageTravelExpensesRecord, String?> =
    createField(DSL.name("image_provider"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.bonvoyage_travel_expenses.description</code>. */
  val DESCRIPTION: TableField<BonvoyageTravelExpensesRecord, String?> =
    createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.bonvoyage_travel_expenses.expense_created_at</code>. */
  val EXPENSE_CREATED_AT: TableField<BonvoyageTravelExpensesRecord, OffsetDateTime?> =
    createField(
      DSL.name("expense_created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false),
      this,
      "",
    )

  /** The column <code>public.bonvoyage_travel_expenses.created_at</code>. */
  val CREATED_AT: TableField<BonvoyageTravelExpensesRecord, OffsetDateTime?> =
    createField(
      DSL.name("created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6)
        .nullable(false)
        .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  /** The column <code>public.bonvoyage_travel_expenses.updated_at</code>. */
  val UPDATED_AT: TableField<BonvoyageTravelExpensesRecord, OffsetDateTime?> =
    createField(
      DSL.name("updated_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6)
        .nullable(false)
        .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  private constructor(
    alias: Name,
    aliased: Table<BonvoyageTravelExpensesRecord>?,
  ) : this(alias, null, null, null, aliased, null, null)

  private constructor(
    alias: Name,
    aliased: Table<BonvoyageTravelExpensesRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)

  private constructor(
    alias: Name,
    aliased: Table<BonvoyageTravelExpensesRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /** Create an aliased <code>public.bonvoyage_travel_expenses</code> table reference */
  constructor(alias: String) : this(DSL.name(alias))

  /** Create an aliased <code>public.bonvoyage_travel_expenses</code> table reference */
  constructor(alias: Name) : this(alias, null)

  /** Create a <code>public.bonvoyage_travel_expenses</code> table reference */
  constructor() : this(DSL.name("bonvoyage_travel_expenses"), null)

  constructor(
    path: Table<out Record>,
    childPath: ForeignKey<out Record, BonvoyageTravelExpensesRecord>?,
    parentPath: InverseForeignKey<out Record, BonvoyageTravelExpensesRecord>?,
  ) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    BONVOYAGE_TRAVEL_EXPENSES,
    null,
    null,
  )

  /** A subtype implementing {@link Path} for simplified path-based joins. */
  open class BonvoyageTravelExpensesPath :
    BonvoyageTravelExpenses, Path<BonvoyageTravelExpensesRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, BonvoyageTravelExpensesRecord>?,
      parentPath: InverseForeignKey<out Record, BonvoyageTravelExpensesRecord>?,
    ) : super(path, childPath, parentPath)

    private constructor(
      alias: Name,
      aliased: Table<BonvoyageTravelExpensesRecord>,
    ) : super(alias, aliased)

    override fun `as`(alias: String): BonvoyageTravelExpensesPath =
      BonvoyageTravelExpensesPath(DSL.name(alias), this)

    override fun `as`(alias: Name): BonvoyageTravelExpensesPath =
      BonvoyageTravelExpensesPath(alias, this)

    override fun `as`(alias: Table<*>): BonvoyageTravelExpensesPath =
      BonvoyageTravelExpensesPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> =
    listOf(
      BONVOYAGE_TRAVEL_EXPENSES_CREATED_AT_IDX,
      BONVOYAGE_TRAVEL_EXPENSES_EXPENSE_CREATED_AT_IDX,
      BONVOYAGE_TRAVEL_EXPENSES_TRIP_ID_IDX,
    )

  override fun getPrimaryKey(): UniqueKey<BonvoyageTravelExpensesRecord> =
    BONVOYAGE_TRAVEL_EXPENSES_PKEY

  override fun getReferences(): List<ForeignKey<BonvoyageTravelExpensesRecord, *>> =
    listOf(BONVOYAGE_TRAVEL_EXPENSES__BONVOYAGE_TRAVEL_EXPENSES_TRIP_ID_FKEY)

  /** Get the implicit join path to the <code>public.bonvoyage_trips</code> table. */
  fun bonvoyageTrips(): BonvoyageTripsPath = bonvoyageTrips

  val bonvoyageTrips: BonvoyageTripsPath by lazy {
    BonvoyageTripsPath(
      this,
      BONVOYAGE_TRAVEL_EXPENSES__BONVOYAGE_TRAVEL_EXPENSES_TRIP_ID_FKEY,
      null,
    )
  }

  override fun `as`(alias: String): BonvoyageTravelExpenses =
    BonvoyageTravelExpenses(DSL.name(alias), this)

  override fun `as`(alias: Name): BonvoyageTravelExpenses = BonvoyageTravelExpenses(alias, this)

  override fun `as`(alias: Table<*>): BonvoyageTravelExpenses =
    BonvoyageTravelExpenses(alias.qualifiedName, this)

  /** Rename this table */
  override fun rename(name: String): BonvoyageTravelExpenses =
    BonvoyageTravelExpenses(DSL.name(name), null)

  /** Rename this table */
  override fun rename(name: Name): BonvoyageTravelExpenses = BonvoyageTravelExpenses(name, null)

  /** Rename this table */
  override fun rename(name: Table<*>): BonvoyageTravelExpenses =
    BonvoyageTravelExpenses(name.qualifiedName, null)

  /** Create an inline derived table from this table */
  override fun where(condition: Condition?): BonvoyageTravelExpenses =
    BonvoyageTravelExpenses(qualifiedName, if (aliased()) this else null, condition)

  /** Create an inline derived table from this table */
  override fun where(conditions: Collection<Condition>): BonvoyageTravelExpenses =
    where(DSL.and(conditions))

  /** Create an inline derived table from this table */
  override fun where(vararg conditions: Condition?): BonvoyageTravelExpenses =
    where(DSL.and(*conditions))

  /** Create an inline derived table from this table */
  override fun where(condition: Field<Boolean?>?): BonvoyageTravelExpenses =
    where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(condition: SQL): BonvoyageTravelExpenses = where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String): BonvoyageTravelExpenses =
    where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String, vararg binds: Any?): BonvoyageTravelExpenses =
    where(DSL.condition(condition, *binds))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(
    @Stringly.SQL condition: String,
    vararg parts: QueryPart,
  ): BonvoyageTravelExpenses = where(DSL.condition(condition, *parts))

  /** Create an inline derived table from this table */
  override fun whereExists(select: Select<*>): BonvoyageTravelExpenses = where(DSL.exists(select))

  /** Create an inline derived table from this table */
  override fun whereNotExists(select: Select<*>): BonvoyageTravelExpenses =
    where(DSL.notExists(select))
}
