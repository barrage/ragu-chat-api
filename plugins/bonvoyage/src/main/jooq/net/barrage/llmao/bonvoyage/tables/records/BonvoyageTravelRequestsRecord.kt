/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.bonvoyage.tables.records


import java.time.LocalDate
import java.time.OffsetDateTime
import java.time.OffsetTime
import java.util.UUID

import net.barrage.llmao.bonvoyage.tables.BonvoyageTravelRequests

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class BonvoyageTravelRequestsRecord private constructor() : UpdatableRecordImpl<BonvoyageTravelRequestsRecord>(BonvoyageTravelRequests.BONVOYAGE_TRAVEL_REQUESTS) {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var userId: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var userFullName: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var userEmail: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var startLocation: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open var stops: String
        set(value): Unit = set(5, value)
        get(): String = get(5) as String

    open var endLocation: String
        set(value): Unit = set(6, value)
        get(): String = get(6) as String

    open var transportType: String
        set(value): Unit = set(7, value)
        get(): String = get(7) as String

    open var description: String
        set(value): Unit = set(8, value)
        get(): String = get(8) as String

    open var vehicleType: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var vehicleRegistration: String?
        set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    @Suppress("INAPPLICABLE_JVM_NAME")
    @set:JvmName("setIsDriver")
    open var isDriver: Boolean?
        set(value): Unit = set(11, value)
        get(): Boolean? = get(11) as Boolean?

    open var startDate: LocalDate
        set(value): Unit = set(12, value)
        get(): LocalDate = get(12) as LocalDate

    open var endDate: LocalDate
        set(value): Unit = set(13, value)
        get(): LocalDate = get(13) as LocalDate

    open var expectedStartTime: OffsetTime?
        set(value): Unit = set(14, value)
        get(): OffsetTime? = get(14) as OffsetTime?

    open var expectedEndTime: OffsetTime?
        set(value): Unit = set(15, value)
        get(): OffsetTime? = get(15) as OffsetTime?

    open var status: String
        set(value): Unit = set(16, value)
        get(): String = get(16) as String

    open var reviewerId: String?
        set(value): Unit = set(17, value)
        get(): String? = get(17) as String?

    open var reviewComment: String?
        set(value): Unit = set(18, value)
        get(): String? = get(18) as String?

    open var tripId: UUID?
        set(value): Unit = set(19, value)
        get(): UUID? = get(19) as UUID?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(20, value)
        get(): OffsetDateTime? = get(20) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised BonvoyageTravelRequestsRecord
     */
    constructor(id: UUID? = null, userId: String, userFullName: String, userEmail: String, startLocation: String, stops: String, endLocation: String, transportType: String, description: String, vehicleType: String? = null, vehicleRegistration: String? = null, isDriver: Boolean? = null, startDate: LocalDate, endDate: LocalDate, expectedStartTime: OffsetTime? = null, expectedEndTime: OffsetTime? = null, status: String, reviewerId: String? = null, reviewComment: String? = null, tripId: UUID? = null, createdAt: OffsetDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.userFullName = userFullName
        this.userEmail = userEmail
        this.startLocation = startLocation
        this.stops = stops
        this.endLocation = endLocation
        this.transportType = transportType
        this.description = description
        this.vehicleType = vehicleType
        this.vehicleRegistration = vehicleRegistration
        this.isDriver = isDriver
        this.startDate = startDate
        this.endDate = endDate
        this.expectedStartTime = expectedStartTime
        this.expectedEndTime = expectedEndTime
        this.status = status
        this.reviewerId = reviewerId
        this.reviewComment = reviewComment
        this.tripId = tripId
        this.createdAt = createdAt
        resetTouchedOnNotNull()
    }
}
