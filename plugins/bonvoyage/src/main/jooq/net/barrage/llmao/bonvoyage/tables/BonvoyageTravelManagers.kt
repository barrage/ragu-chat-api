/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.bonvoyage.tables


import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import net.barrage.llmao.bonvoyage.Public
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRAVEL_MANAGERS_USER_EMAIL_IDX
import net.barrage.llmao.bonvoyage.indexes.BONVOYAGE_TRAVEL_MANAGERS_USER_ID_IDX
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRAVEL_MANAGERS_PKEY
import net.barrage.llmao.bonvoyage.keys.BONVOYAGE_TRAVEL_MANAGER_USER_MAPPINGS__BONVOYAGE_TRAVEL_MANAGER_USER_MAPPINGS_TRAVEL_MANAGER_ID_FKEY
import net.barrage.llmao.bonvoyage.tables.BonvoyageTravelManagerUserMappings.BonvoyageTravelManagerUserMappingsPath
import net.barrage.llmao.bonvoyage.tables.records.BonvoyageTravelManagersRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class BonvoyageTravelManagers(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, BonvoyageTravelManagersRecord>?,
    parentPath: InverseForeignKey<out Record, BonvoyageTravelManagersRecord>?,
    aliased: Table<BonvoyageTravelManagersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<BonvoyageTravelManagersRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.bonvoyage_travel_managers</code>
         */
        val BONVOYAGE_TRAVEL_MANAGERS: BonvoyageTravelManagers = BonvoyageTravelManagers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BonvoyageTravelManagersRecord> = BonvoyageTravelManagersRecord::class.java

    /**
     * The column <code>public.bonvoyage_travel_managers.user_id</code>.
     */
    val USER_ID: TableField<BonvoyageTravelManagersRecord, String?> = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_travel_managers.user_full_name</code>.
     */
    val USER_FULL_NAME: TableField<BonvoyageTravelManagersRecord, String?> = createField(DSL.name("user_full_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_travel_managers.user_email</code>.
     */
    val USER_EMAIL: TableField<BonvoyageTravelManagersRecord, String?> = createField(DSL.name("user_email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.bonvoyage_travel_managers.created_at</code>.
     */
    val CREATED_AT: TableField<BonvoyageTravelManagersRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<BonvoyageTravelManagersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<BonvoyageTravelManagersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<BonvoyageTravelManagersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.bonvoyage_travel_managers</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.bonvoyage_travel_managers</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.bonvoyage_travel_managers</code> table reference
     */
    constructor(): this(DSL.name("bonvoyage_travel_managers"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BonvoyageTravelManagersRecord>?, parentPath: InverseForeignKey<out Record, BonvoyageTravelManagersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, BONVOYAGE_TRAVEL_MANAGERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class BonvoyageTravelManagersPath : BonvoyageTravelManagers, Path<BonvoyageTravelManagersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, BonvoyageTravelManagersRecord>?, parentPath: InverseForeignKey<out Record, BonvoyageTravelManagersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<BonvoyageTravelManagersRecord>): super(alias, aliased)
        override fun `as`(alias: String): BonvoyageTravelManagersPath = BonvoyageTravelManagersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): BonvoyageTravelManagersPath = BonvoyageTravelManagersPath(alias, this)
        override fun `as`(alias: Table<*>): BonvoyageTravelManagersPath = BonvoyageTravelManagersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(BONVOYAGE_TRAVEL_MANAGERS_USER_EMAIL_IDX, BONVOYAGE_TRAVEL_MANAGERS_USER_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<BonvoyageTravelManagersRecord> = BONVOYAGE_TRAVEL_MANAGERS_PKEY

    private lateinit var _bonvoyageTravelManagerUserMappings: BonvoyageTravelManagerUserMappingsPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.bonvoyage_travel_manager_user_mappings</code> table
     */
    fun bonvoyageTravelManagerUserMappings(): BonvoyageTravelManagerUserMappingsPath {
        if (!this::_bonvoyageTravelManagerUserMappings.isInitialized)
            _bonvoyageTravelManagerUserMappings = BonvoyageTravelManagerUserMappingsPath(this, null, BONVOYAGE_TRAVEL_MANAGER_USER_MAPPINGS__BONVOYAGE_TRAVEL_MANAGER_USER_MAPPINGS_TRAVEL_MANAGER_ID_FKEY.inverseKey)

        return _bonvoyageTravelManagerUserMappings;
    }

    val bonvoyageTravelManagerUserMappings: BonvoyageTravelManagerUserMappingsPath
        get(): BonvoyageTravelManagerUserMappingsPath = bonvoyageTravelManagerUserMappings()
    override fun `as`(alias: String): BonvoyageTravelManagers = BonvoyageTravelManagers(DSL.name(alias), this)
    override fun `as`(alias: Name): BonvoyageTravelManagers = BonvoyageTravelManagers(alias, this)
    override fun `as`(alias: Table<*>): BonvoyageTravelManagers = BonvoyageTravelManagers(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BonvoyageTravelManagers = BonvoyageTravelManagers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BonvoyageTravelManagers = BonvoyageTravelManagers(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BonvoyageTravelManagers = BonvoyageTravelManagers(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): BonvoyageTravelManagers = BonvoyageTravelManagers(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): BonvoyageTravelManagers = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): BonvoyageTravelManagers = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): BonvoyageTravelManagers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): BonvoyageTravelManagers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): BonvoyageTravelManagers = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): BonvoyageTravelManagers = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): BonvoyageTravelManagers = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): BonvoyageTravelManagers = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): BonvoyageTravelManagers = where(DSL.notExists(select))
}
