@file:Suppress("warnings")

/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.chat.keys

import net.barrage.llmao.chat.tables.AgentCollections
import net.barrage.llmao.chat.tables.AgentConfigurations
import net.barrage.llmao.chat.tables.AgentPermissions
import net.barrage.llmao.chat.tables.AgentTools
import net.barrage.llmao.chat.tables.Agents
import net.barrage.llmao.chat.tables.Chats
import net.barrage.llmao.chat.tables.WhatsAppNumbers
import net.barrage.llmao.chat.tables.records.AgentCollectionsRecord
import net.barrage.llmao.chat.tables.records.AgentConfigurationsRecord
import net.barrage.llmao.chat.tables.records.AgentPermissionsRecord
import net.barrage.llmao.chat.tables.records.AgentToolsRecord
import net.barrage.llmao.chat.tables.records.AgentsRecord
import net.barrage.llmao.chat.tables.records.ChatsRecord
import net.barrage.llmao.chat.tables.records.WhatsAppNumbersRecord
import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.QOM.ForeignKeyRule

// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val AGENT_COLLECTIONS_PKEY: UniqueKey<AgentCollectionsRecord> =
  Internal.createUniqueKey(
    AgentCollections.AGENT_COLLECTIONS,
    DSL.name("agent_collections_pkey"),
    arrayOf(AgentCollections.AGENT_COLLECTIONS.ID),
    true,
  )
val AGENT_COLLECTIONS_UNIQUE_AGENT_COLLECTION: UniqueKey<AgentCollectionsRecord> =
  Internal.createUniqueKey(
    AgentCollections.AGENT_COLLECTIONS,
    DSL.name("agent_collections_unique_agent_collection"),
    arrayOf(
      AgentCollections.AGENT_COLLECTIONS.AGENT_ID,
      AgentCollections.AGENT_COLLECTIONS.COLLECTION,
      AgentCollections.AGENT_COLLECTIONS.VECTOR_PROVIDER,
    ),
    true,
  )
val AGENT_CONFIGURATIONS_PKEY: UniqueKey<AgentConfigurationsRecord> =
  Internal.createUniqueKey(
    AgentConfigurations.AGENT_CONFIGURATIONS,
    DSL.name("agent_configurations_pkey"),
    arrayOf(AgentConfigurations.AGENT_CONFIGURATIONS.ID),
    true,
  )
val AGENT_GROUPS_UNIQUE_AGENT_GROUP: UniqueKey<AgentPermissionsRecord> =
  Internal.createUniqueKey(
    AgentPermissions.AGENT_PERMISSIONS,
    DSL.name("agent_groups_unique_agent_group"),
    arrayOf(AgentPermissions.AGENT_PERMISSIONS.AGENT_ID, AgentPermissions.AGENT_PERMISSIONS.GROUP),
    true,
  )
val AGENT_PERMISSIONS_PKEY: UniqueKey<AgentPermissionsRecord> =
  Internal.createUniqueKey(
    AgentPermissions.AGENT_PERMISSIONS,
    DSL.name("agent_permissions_pkey"),
    arrayOf(AgentPermissions.AGENT_PERMISSIONS.ID),
    true,
  )
val AGENT_TOOLS_PKEY: UniqueKey<AgentToolsRecord> =
  Internal.createUniqueKey(
    AgentTools.AGENT_TOOLS,
    DSL.name("agent_tools_pkey"),
    arrayOf(AgentTools.AGENT_TOOLS.ID),
    true,
  )
val AGENT_TOOLS_UNIQUE_AGENT_TOOL: UniqueKey<AgentToolsRecord> =
  Internal.createUniqueKey(
    AgentTools.AGENT_TOOLS,
    DSL.name("agent_tools_unique_agent_tool"),
    arrayOf(AgentTools.AGENT_TOOLS.AGENT_ID, AgentTools.AGENT_TOOLS.TOOL_NAME),
    true,
  )
val AGENTS_PKEY: UniqueKey<AgentsRecord> =
  Internal.createUniqueKey(Agents.AGENTS, DSL.name("agents_pkey"), arrayOf(Agents.AGENTS.ID), true)
val CHATS_PKEY: UniqueKey<ChatsRecord> =
  Internal.createUniqueKey(Chats.CHATS, DSL.name("chats_pkey"), arrayOf(Chats.CHATS.ID), true)
val WHATS_APP_NUMBERS_PHONE_NUMBER_KEY: UniqueKey<WhatsAppNumbersRecord> =
  Internal.createUniqueKey(
    WhatsAppNumbers.WHATS_APP_NUMBERS,
    DSL.name("whats_app_numbers_phone_number_key"),
    arrayOf(WhatsAppNumbers.WHATS_APP_NUMBERS.PHONE_NUMBER),
    true,
  )
val WHATS_APP_NUMBERS_PKEY: UniqueKey<WhatsAppNumbersRecord> =
  Internal.createUniqueKey(
    WhatsAppNumbers.WHATS_APP_NUMBERS,
    DSL.name("whats_app_numbers_pkey"),
    arrayOf(WhatsAppNumbers.WHATS_APP_NUMBERS.ID),
    true,
  )

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val AGENT_COLLECTIONS__AGENT_COLLECTIONS_AGENT_ID_FKEY:
  ForeignKey<AgentCollectionsRecord, AgentsRecord> =
  Internal.createForeignKey(
    AgentCollections.AGENT_COLLECTIONS,
    DSL.name("agent_collections_agent_id_fkey"),
    arrayOf(AgentCollections.AGENT_COLLECTIONS.AGENT_ID),
    net.barrage.llmao.chat.keys.AGENTS_PKEY,
    arrayOf(Agents.AGENTS.ID),
    true,
    ForeignKeyRule.CASCADE,
    ForeignKeyRule.NO_ACTION,
  )
val AGENT_CONFIGURATIONS__AGENT_CONFIGURATIONS_AGENT_ID_FKEY:
  ForeignKey<AgentConfigurationsRecord, AgentsRecord> =
  Internal.createForeignKey(
    AgentConfigurations.AGENT_CONFIGURATIONS,
    DSL.name("agent_configurations_agent_id_fkey"),
    arrayOf(AgentConfigurations.AGENT_CONFIGURATIONS.AGENT_ID),
    net.barrage.llmao.chat.keys.AGENTS_PKEY,
    arrayOf(Agents.AGENTS.ID),
    true,
    ForeignKeyRule.CASCADE,
    ForeignKeyRule.NO_ACTION,
  )
val AGENT_PERMISSIONS__AGENT_PERMISSIONS_AGENT_ID_FKEY:
  ForeignKey<AgentPermissionsRecord, AgentsRecord> =
  Internal.createForeignKey(
    AgentPermissions.AGENT_PERMISSIONS,
    DSL.name("agent_permissions_agent_id_fkey"),
    arrayOf(AgentPermissions.AGENT_PERMISSIONS.AGENT_ID),
    net.barrage.llmao.chat.keys.AGENTS_PKEY,
    arrayOf(Agents.AGENTS.ID),
    true,
    ForeignKeyRule.CASCADE,
    ForeignKeyRule.NO_ACTION,
  )
val AGENT_TOOLS__AGENT_TOOLS_AGENT_ID_FKEY: ForeignKey<AgentToolsRecord, AgentsRecord> =
  Internal.createForeignKey(
    AgentTools.AGENT_TOOLS,
    DSL.name("agent_tools_agent_id_fkey"),
    arrayOf(AgentTools.AGENT_TOOLS.AGENT_ID),
    net.barrage.llmao.chat.keys.AGENTS_PKEY,
    arrayOf(Agents.AGENTS.ID),
    true,
    ForeignKeyRule.CASCADE,
    ForeignKeyRule.NO_ACTION,
  )
val CHATS__CHATS_AGENT_CONFIGURATION_ID_FKEY: ForeignKey<ChatsRecord, AgentConfigurationsRecord> =
  Internal.createForeignKey(
    Chats.CHATS,
    DSL.name("chats_agent_configuration_id_fkey"),
    arrayOf(Chats.CHATS.AGENT_CONFIGURATION_ID),
    net.barrage.llmao.chat.keys.AGENT_CONFIGURATIONS_PKEY,
    arrayOf(AgentConfigurations.AGENT_CONFIGURATIONS.ID),
    true,
    ForeignKeyRule.CASCADE,
    ForeignKeyRule.NO_ACTION,
  )
val CHATS__CHATS_AGENT_ID_FKEY: ForeignKey<ChatsRecord, AgentsRecord> =
  Internal.createForeignKey(
    Chats.CHATS,
    DSL.name("chats_agent_id_fkey"),
    arrayOf(Chats.CHATS.AGENT_ID),
    net.barrage.llmao.chat.keys.AGENTS_PKEY,
    arrayOf(Agents.AGENTS.ID),
    true,
    ForeignKeyRule.CASCADE,
    ForeignKeyRule.NO_ACTION,
  )
