/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.chat.tables

import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List
import net.barrage.llmao.chat.Public
import net.barrage.llmao.chat.indexes.IDX_WHATSAPP_NUMBERS_PHONE_NUMBER
import net.barrage.llmao.chat.indexes.IDX_WHATSAPP_NUMBERS_USER_ID
import net.barrage.llmao.chat.keys.WHATS_APP_NUMBERS_PHONE_NUMBER_KEY
import net.barrage.llmao.chat.keys.WHATS_APP_NUMBERS_PKEY
import net.barrage.llmao.chat.tables.records.WhatsAppNumbersRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("warnings")
open class WhatsAppNumbers(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, WhatsAppNumbersRecord>?,
  parentPath: InverseForeignKey<out Record, WhatsAppNumbersRecord>?,
  aliased: Table<WhatsAppNumbersRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) :
  TableImpl<WhatsAppNumbersRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {

    /** The reference instance of <code>public.whats_app_numbers</code> */
    val WHATS_APP_NUMBERS: WhatsAppNumbers = WhatsAppNumbers()
  }

  /** The class holding records for this type */
  override fun getRecordType(): Class<WhatsAppNumbersRecord> = WhatsAppNumbersRecord::class.java

  /** The column <code>public.whats_app_numbers.id</code>. */
  val ID: TableField<WhatsAppNumbersRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false)
        .defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /** The column <code>public.whats_app_numbers.user_id</code>. */
  val USER_ID: TableField<WhatsAppNumbersRecord, String?> =
    createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.whats_app_numbers.username</code>. */
  val USERNAME: TableField<WhatsAppNumbersRecord, String?> =
    createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.whats_app_numbers.phone_number</code>. */
  val PHONE_NUMBER: TableField<WhatsAppNumbersRecord, String?> =
    createField(DSL.name("phone_number"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.whats_app_numbers.created_at</code>. */
  val CREATED_AT: TableField<WhatsAppNumbersRecord, OffsetDateTime?> =
    createField(
      DSL.name("created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6)
        .nullable(false)
        .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  /** The column <code>public.whats_app_numbers.updated_at</code>. */
  val UPDATED_AT: TableField<WhatsAppNumbersRecord, OffsetDateTime?> =
    createField(
      DSL.name("updated_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6)
        .nullable(false)
        .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  private constructor(
    alias: Name,
    aliased: Table<WhatsAppNumbersRecord>?,
  ) : this(alias, null, null, null, aliased, null, null)

  private constructor(
    alias: Name,
    aliased: Table<WhatsAppNumbersRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)

  private constructor(
    alias: Name,
    aliased: Table<WhatsAppNumbersRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /** Create an aliased <code>public.whats_app_numbers</code> table reference */
  constructor(alias: String) : this(DSL.name(alias))

  /** Create an aliased <code>public.whats_app_numbers</code> table reference */
  constructor(alias: Name) : this(alias, null)

  /** Create a <code>public.whats_app_numbers</code> table reference */
  constructor() : this(DSL.name("whats_app_numbers"), null)

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> =
    listOf(IDX_WHATSAPP_NUMBERS_PHONE_NUMBER, IDX_WHATSAPP_NUMBERS_USER_ID)

  override fun getPrimaryKey(): UniqueKey<WhatsAppNumbersRecord> = WHATS_APP_NUMBERS_PKEY

  override fun getUniqueKeys(): List<UniqueKey<WhatsAppNumbersRecord>> =
    listOf(WHATS_APP_NUMBERS_PHONE_NUMBER_KEY)

  override fun `as`(alias: String): WhatsAppNumbers = WhatsAppNumbers(DSL.name(alias), this)

  override fun `as`(alias: Name): WhatsAppNumbers = WhatsAppNumbers(alias, this)

  override fun `as`(alias: Table<*>): WhatsAppNumbers = WhatsAppNumbers(alias.qualifiedName, this)

  /** Rename this table */
  override fun rename(name: String): WhatsAppNumbers = WhatsAppNumbers(DSL.name(name), null)

  /** Rename this table */
  override fun rename(name: Name): WhatsAppNumbers = WhatsAppNumbers(name, null)

  /** Rename this table */
  override fun rename(name: Table<*>): WhatsAppNumbers = WhatsAppNumbers(name.qualifiedName, null)

  /** Create an inline derived table from this table */
  override fun where(condition: Condition?): WhatsAppNumbers =
    WhatsAppNumbers(qualifiedName, if (aliased()) this else null, condition)

  /** Create an inline derived table from this table */
  override fun where(conditions: Collection<Condition>): WhatsAppNumbers =
    where(DSL.and(conditions))

  /** Create an inline derived table from this table */
  override fun where(vararg conditions: Condition?): WhatsAppNumbers = where(DSL.and(*conditions))

  /** Create an inline derived table from this table */
  override fun where(condition: Field<Boolean?>?): WhatsAppNumbers = where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL override fun where(condition: SQL): WhatsAppNumbers = where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String): WhatsAppNumbers =
    where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String, vararg binds: Any?): WhatsAppNumbers =
    where(DSL.condition(condition, *binds))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): WhatsAppNumbers =
    where(DSL.condition(condition, *parts))

  /** Create an inline derived table from this table */
  override fun whereExists(select: Select<*>): WhatsAppNumbers = where(DSL.exists(select))

  /** Create an inline derived table from this table */
  override fun whereNotExists(select: Select<*>): WhatsAppNumbers = where(DSL.notExists(select))
}
