/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.chat.tables


import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import net.barrage.llmao.chat.Public
import net.barrage.llmao.chat.indexes.CHATS_AGENT_ID_IDX
import net.barrage.llmao.chat.indexes.CHATS_TYPE_IDX
import net.barrage.llmao.chat.indexes.CHATS_USER_ID_IDX
import net.barrage.llmao.chat.keys.CHATS_PKEY
import net.barrage.llmao.chat.keys.CHATS__CHATS_AGENT_CONFIGURATION_ID_FKEY
import net.barrage.llmao.chat.keys.CHATS__CHATS_AGENT_ID_FKEY
import net.barrage.llmao.chat.tables.AgentConfigurations.AgentConfigurationsPath
import net.barrage.llmao.chat.tables.Agents.AgentsPath
import net.barrage.llmao.chat.tables.records.ChatsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Chats(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ChatsRecord>?,
    parentPath: InverseForeignKey<out Record, ChatsRecord>?,
    aliased: Table<ChatsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ChatsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.chats</code>
         */
        val CHATS: Chats = Chats()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ChatsRecord> = ChatsRecord::class.java

    /**
     * The column <code>public.chats.id</code>.
     */
    val ID: TableField<ChatsRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.chats.agent_id</code>.
     */
    val AGENT_ID: TableField<ChatsRecord, UUID?> = createField(DSL.name("agent_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.chats.agent_configuration_id</code>.
     */
    val AGENT_CONFIGURATION_ID: TableField<ChatsRecord, UUID?> = createField(DSL.name("agent_configuration_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.chats.user_id</code>.
     */
    val USER_ID: TableField<ChatsRecord, String?> = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.chats.username</code>.
     */
    val USERNAME: TableField<ChatsRecord, String?> = createField(DSL.name("username"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.chats.title</code>.
     */
    val TITLE: TableField<ChatsRecord, String?> = createField(DSL.name("title"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.chats.type</code>.
     */
    val TYPE: TableField<ChatsRecord, String?> = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.chats.created_at</code>.
     */
    val CREATED_AT: TableField<ChatsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.chats.updated_at</code>.
     */
    val UPDATED_AT: TableField<ChatsRecord, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<ChatsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ChatsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ChatsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.chats</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.chats</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.chats</code> table reference
     */
    constructor(): this(DSL.name("chats"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ChatsRecord>?, parentPath: InverseForeignKey<out Record, ChatsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, CHATS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ChatsPath : Chats, Path<ChatsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ChatsRecord>?, parentPath: InverseForeignKey<out Record, ChatsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ChatsRecord>): super(alias, aliased)
        override fun `as`(alias: String): ChatsPath = ChatsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ChatsPath = ChatsPath(alias, this)
        override fun `as`(alias: Table<*>): ChatsPath = ChatsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(CHATS_AGENT_ID_IDX, CHATS_TYPE_IDX, CHATS_USER_ID_IDX)
    override fun getPrimaryKey(): UniqueKey<ChatsRecord> = CHATS_PKEY
    override fun getReferences(): List<ForeignKey<ChatsRecord, *>> = listOf(CHATS__CHATS_AGENT_CONFIGURATION_ID_FKEY, CHATS__CHATS_AGENT_ID_FKEY)

    /**
     * Get the implicit join path to the
     * <code>public.agent_configurations</code> table.
     */
    fun agentConfigurations(): AgentConfigurationsPath = agentConfigurations
    val agentConfigurations: AgentConfigurationsPath by lazy { AgentConfigurationsPath(this, CHATS__CHATS_AGENT_CONFIGURATION_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.agents</code> table.
     */
    fun agents(): AgentsPath = agents
    val agents: AgentsPath by lazy { AgentsPath(this, CHATS__CHATS_AGENT_ID_FKEY, null) }
    override fun `as`(alias: String): Chats = Chats(DSL.name(alias), this)
    override fun `as`(alias: Name): Chats = Chats(alias, this)
    override fun `as`(alias: Table<*>): Chats = Chats(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Chats = Chats(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Chats = Chats(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Chats = Chats(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Chats = Chats(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Chats = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Chats = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Chats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Chats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Chats = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Chats = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Chats = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Chats = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Chats = where(DSL.notExists(select))
}
