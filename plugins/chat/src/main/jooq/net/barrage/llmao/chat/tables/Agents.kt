/*
 * This file is generated by jOOQ.
 */
package net.barrage.llmao.chat.tables

import java.time.OffsetDateTime
import java.util.UUID
import kotlin.collections.Collection
import kotlin.collections.List
import net.barrage.llmao.chat.Public
import net.barrage.llmao.chat.indexes.AGENTS_ACTIVE_IDX
import net.barrage.llmao.chat.keys.AGENTS_PKEY
import net.barrage.llmao.chat.keys.AGENT_COLLECTIONS__AGENT_COLLECTIONS_AGENT_ID_FKEY
import net.barrage.llmao.chat.keys.AGENT_CONFIGURATIONS__AGENT_CONFIGURATIONS_AGENT_ID_FKEY
import net.barrage.llmao.chat.keys.AGENT_PERMISSIONS__AGENT_PERMISSIONS_AGENT_ID_FKEY
import net.barrage.llmao.chat.keys.AGENT_TOOLS__AGENT_TOOLS_AGENT_ID_FKEY
import net.barrage.llmao.chat.keys.CHATS__CHATS_AGENT_ID_FKEY
import net.barrage.llmao.chat.tables.AgentCollections.AgentCollectionsPath
import net.barrage.llmao.chat.tables.AgentConfigurations.AgentConfigurationsPath
import net.barrage.llmao.chat.tables.AgentPermissions.AgentPermissionsPath
import net.barrage.llmao.chat.tables.AgentTools.AgentToolsPath
import net.barrage.llmao.chat.tables.Chats.ChatsPath
import net.barrage.llmao.chat.tables.records.AgentsRecord
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

/** This class is generated by jOOQ. */
@Suppress("warnings")
open class Agents(
  alias: Name,
  path: Table<out Record>?,
  childPath: ForeignKey<out Record, AgentsRecord>?,
  parentPath: InverseForeignKey<out Record, AgentsRecord>?,
  aliased: Table<AgentsRecord>?,
  parameters: Array<Field<*>?>?,
  where: Condition?,
) :
  TableImpl<AgentsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
  ) {
  companion object {

    /** The reference instance of <code>public.agents</code> */
    val AGENTS: Agents = Agents()
  }

  /** The class holding records for this type */
  override fun getRecordType(): Class<AgentsRecord> = AgentsRecord::class.java

  /** The column <code>public.agents.id</code>. */
  val ID: TableField<AgentsRecord, UUID?> =
    createField(
      DSL.name("id"),
      SQLDataType.UUID.nullable(false)
        .defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)),
      this,
      "",
    )

  /** The column <code>public.agents.name</code>. */
  val NAME: TableField<AgentsRecord, String?> =
    createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

  /** The column <code>public.agents.description</code>. */
  val DESCRIPTION: TableField<AgentsRecord, String?> =
    createField(DSL.name("description"), SQLDataType.CLOB, this, "")

  /** The column <code>public.agents.active</code>. */
  val ACTIVE: TableField<AgentsRecord, Boolean?> =
    createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "")

  /** The column <code>public.agents.active_configuration_id</code>. */
  val ACTIVE_CONFIGURATION_ID: TableField<AgentsRecord, UUID?> =
    createField(DSL.name("active_configuration_id"), SQLDataType.UUID, this, "")

  /** The column <code>public.agents.language</code>. */
  val LANGUAGE: TableField<AgentsRecord, String?> =
    createField(DSL.name("language"), SQLDataType.CLOB, this, "")

  /** The column <code>public.agents.avatar</code>. */
  val AVATAR: TableField<AgentsRecord, String?> =
    createField(DSL.name("avatar"), SQLDataType.CLOB, this, "")

  /** The column <code>public.agents.created_at</code>. */
  val CREATED_AT: TableField<AgentsRecord, OffsetDateTime?> =
    createField(
      DSL.name("created_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6)
        .nullable(false)
        .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  /** The column <code>public.agents.updated_at</code>. */
  val UPDATED_AT: TableField<AgentsRecord, OffsetDateTime?> =
    createField(
      DSL.name("updated_at"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6)
        .nullable(false)
        .defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)),
      this,
      "",
    )

  private constructor(
    alias: Name,
    aliased: Table<AgentsRecord>?,
  ) : this(alias, null, null, null, aliased, null, null)

  private constructor(
    alias: Name,
    aliased: Table<AgentsRecord>?,
    parameters: Array<Field<*>?>?,
  ) : this(alias, null, null, null, aliased, parameters, null)

  private constructor(
    alias: Name,
    aliased: Table<AgentsRecord>?,
    where: Condition?,
  ) : this(alias, null, null, null, aliased, null, where)

  /** Create an aliased <code>public.agents</code> table reference */
  constructor(alias: String) : this(DSL.name(alias))

  /** Create an aliased <code>public.agents</code> table reference */
  constructor(alias: Name) : this(alias, null)

  /** Create a <code>public.agents</code> table reference */
  constructor() : this(DSL.name("agents"), null)

  constructor(
    path: Table<out Record>,
    childPath: ForeignKey<out Record, AgentsRecord>?,
    parentPath: InverseForeignKey<out Record, AgentsRecord>?,
  ) : this(
    Internal.createPathAlias(path, childPath, parentPath),
    path,
    childPath,
    parentPath,
    AGENTS,
    null,
    null,
  )

  /** A subtype implementing {@link Path} for simplified path-based joins. */
  open class AgentsPath : Agents, Path<AgentsRecord> {
    constructor(
      path: Table<out Record>,
      childPath: ForeignKey<out Record, AgentsRecord>?,
      parentPath: InverseForeignKey<out Record, AgentsRecord>?,
    ) : super(path, childPath, parentPath)

    private constructor(alias: Name, aliased: Table<AgentsRecord>) : super(alias, aliased)

    override fun `as`(alias: String): AgentsPath = AgentsPath(DSL.name(alias), this)

    override fun `as`(alias: Name): AgentsPath = AgentsPath(alias, this)

    override fun `as`(alias: Table<*>): AgentsPath = AgentsPath(alias.qualifiedName, this)
  }

  override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC

  override fun getIndexes(): List<Index> = listOf(AGENTS_ACTIVE_IDX)

  override fun getPrimaryKey(): UniqueKey<AgentsRecord> = AGENTS_PKEY

  private lateinit var _agentCollections: AgentCollectionsPath

  /** Get the implicit to-many join path to the <code>public.agent_collections</code> table */
  fun agentCollections(): AgentCollectionsPath {
    if (!this::_agentCollections.isInitialized)
      _agentCollections =
        AgentCollectionsPath(
          this,
          null,
          AGENT_COLLECTIONS__AGENT_COLLECTIONS_AGENT_ID_FKEY.inverseKey,
        )

    return _agentCollections
  }

  val agentCollections: AgentCollectionsPath
    get(): AgentCollectionsPath = agentCollections()

  private lateinit var _agentConfigurations: AgentConfigurationsPath

  /** Get the implicit to-many join path to the <code>public.agent_configurations</code> table */
  fun agentConfigurations(): AgentConfigurationsPath {
    if (!this::_agentConfigurations.isInitialized)
      _agentConfigurations =
        AgentConfigurationsPath(
          this,
          null,
          AGENT_CONFIGURATIONS__AGENT_CONFIGURATIONS_AGENT_ID_FKEY.inverseKey,
        )

    return _agentConfigurations
  }

  val agentConfigurations: AgentConfigurationsPath
    get(): AgentConfigurationsPath = agentConfigurations()

  private lateinit var _agentPermissions: AgentPermissionsPath

  /** Get the implicit to-many join path to the <code>public.agent_permissions</code> table */
  fun agentPermissions(): AgentPermissionsPath {
    if (!this::_agentPermissions.isInitialized)
      _agentPermissions =
        AgentPermissionsPath(
          this,
          null,
          AGENT_PERMISSIONS__AGENT_PERMISSIONS_AGENT_ID_FKEY.inverseKey,
        )

    return _agentPermissions
  }

  val agentPermissions: AgentPermissionsPath
    get(): AgentPermissionsPath = agentPermissions()

  private lateinit var _agentTools: AgentToolsPath

  /** Get the implicit to-many join path to the <code>public.agent_tools</code> table */
  fun agentTools(): AgentToolsPath {
    if (!this::_agentTools.isInitialized)
      _agentTools = AgentToolsPath(this, null, AGENT_TOOLS__AGENT_TOOLS_AGENT_ID_FKEY.inverseKey)

    return _agentTools
  }

  val agentTools: AgentToolsPath
    get(): AgentToolsPath = agentTools()

  private lateinit var _chats: ChatsPath

  /** Get the implicit to-many join path to the <code>public.chats</code> table */
  fun chats(): ChatsPath {
    if (!this::_chats.isInitialized)
      _chats = ChatsPath(this, null, CHATS__CHATS_AGENT_ID_FKEY.inverseKey)

    return _chats
  }

  val chats: ChatsPath
    get(): ChatsPath = chats()

  override fun `as`(alias: String): Agents = Agents(DSL.name(alias), this)

  override fun `as`(alias: Name): Agents = Agents(alias, this)

  override fun `as`(alias: Table<*>): Agents = Agents(alias.qualifiedName, this)

  /** Rename this table */
  override fun rename(name: String): Agents = Agents(DSL.name(name), null)

  /** Rename this table */
  override fun rename(name: Name): Agents = Agents(name, null)

  /** Rename this table */
  override fun rename(name: Table<*>): Agents = Agents(name.qualifiedName, null)

  /** Create an inline derived table from this table */
  override fun where(condition: Condition?): Agents =
    Agents(qualifiedName, if (aliased()) this else null, condition)

  /** Create an inline derived table from this table */
  override fun where(conditions: Collection<Condition>): Agents = where(DSL.and(conditions))

  /** Create an inline derived table from this table */
  override fun where(vararg conditions: Condition?): Agents = where(DSL.and(*conditions))

  /** Create an inline derived table from this table */
  override fun where(condition: Field<Boolean?>?): Agents = where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL override fun where(condition: SQL): Agents = where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String): Agents = where(DSL.condition(condition))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Agents =
    where(DSL.condition(condition, *binds))

  /** Create an inline derived table from this table */
  @PlainSQL
  override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Agents =
    where(DSL.condition(condition, *parts))

  /** Create an inline derived table from this table */
  override fun whereExists(select: Select<*>): Agents = where(DSL.exists(select))

  /** Create an inline derived table from this table */
  override fun whereNotExists(select: Select<*>): Agents = where(DSL.notExists(select))
}
