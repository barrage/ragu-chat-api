ktor {
  application {
    modules = ["net.barrage.llmao.ApplicationKt.module"]
  }
  deployment {
    port = 42069
  }
  environment = "development"
  features {
    whatsApp = true
    specialists {
        jirakira = true
    }
    storage {
      minio = true
    }
    llm {
      azure = true
      openai = true
      ollama = true
    }
    embeddings {
      azure = true
      openai = true
      fembed = true
    }
  }
}

jirakira {
  endpoint = "https://my.jira.endpoint"
}

db {
  url = "jdbc:postgresql://localhost:5454/kappi"
  r2dbcHost = "localhost"
  r2dbcPort = 5454
  r2dbcDatabase = "kappi"
  user = "postgres"
  password = "postgres"
  driver = "org.postgresql.Driver"
  runMigrations = true
}

cors {
  origins = ["http://localhost:3000", "http://localhost:3001"]
  methods = ["GET", "HEAD", "PUT", "PATCH", "POST", "DELETE"]
  headers = []
}

llm {
  openai {
    endpoint = "https://api.openai.com/v1/"
    apiKey = "apiKey"
  }
  azure {
    apiVersion = "2023-05-15"
    endpoint = "endpoint"
    apiKey = "apiKey"
  }
  ollama {
    endpoint = "endpoint"
  }
}

embeddings {
  openai {
    endpoint = "https://api.openai.com/v1/"
    apiKey = "apiKey"
  }
  azure {
    endpoint = "https://RESOURCE.openai.azure.com/openai/deployments"
    deployment = "gippitty-text-embedding-ada-002"
    apiVersion = "2023-05-15"
    apiKey = "apiKey"
  }
  fembed {
    endpoint = "http://192.168.106.28:6969"
  }
}

weaviate {
  host = "localhost:8080"
  scheme = "http"
}

jwt {
    issuer = "https://authentik.barrage.dev/application/o/ragu/"
    jwksEndpoint = "https://authentik.barrage.dev/application/o/ragu/jwks/"
    audience = "HNANpZlS8W7sF9nAA6uZ65YEPa1tyfWmxvT1rJAP"
    # The claim in the access JWT that holds the user's entitlements (groups).
    entitlementsClaim = "entitlements"

    # The leeway for nbf, iat, and exp claims in seconds.
    leeway = 10
}

infobip {
  apiKey = "apiKey"
  endpoint = "https://RESOURCE.api.infobip.com"
  sender = "sender_number"
  template = "welcome_template_name"
  appName = "app_name"
}

apple {
  appID = "namespace"
}

android {
  namespace = "namespace"
  packageName = "namespace"
  sha256CertFingerprints = [
    "fingerprint"
  ]
}

multiplatform {
  ios {
    appID = "appID"
  }
}

upload {
  image {
    maxFileSize = 5242880 # 5MB
  }
}

minio {
  endpoint = "http://localhost:9000"
  accessKey = "minioAdmin"
  secretKey = "minioAdmin"
  bucket = "kappi"
}
