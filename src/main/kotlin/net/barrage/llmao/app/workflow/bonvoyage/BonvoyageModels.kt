package net.barrage.llmao.app.workflow.bonvoyage

import kotlinx.serialization.Serializable
import net.barrage.llmao.core.model.common.PropertyUpdate
import net.barrage.llmao.tables.records.BonvoyageTravelExpensesRecord
import net.barrage.llmao.tables.records.BonvoyageWorkflowsRecord
import net.barrage.llmao.types.KOffsetDateTime
import net.barrage.llmao.types.KUUID

@Serializable
data class BonvoyageTripAggregate(
  val trip: BonvoyageTrip,
  val expenses: List<BonvoyageTravelExpense>,
)

/** A workflow entry with Bonvoyage. A Bonvoyage workflow is a wrapper around a business trip. */
@Serializable
data class BonvoyageTrip(
  /** Unique identifier for this workflow. */
  val id: KUUID,

  /** The user's ID, for the authorization server. */
  val userId: String,

  /** The full name (first + last) of the user who initiated the trip. */
  val userFullName: String,

  /** The user's residence address. Necessary for the final trip report. */
  val userAddress: String,

  /** The travel order ID. Without this, trips cannot exist. */
  val travelOrderId: String,

  /** Where the trip started. */
  val startLocation: String,

  /**
   * The destination of the trip.
   *
   * In case of one way trips, this muse be the same as `endLocation`.
   *
   * In case of return trips, this will be the actual destination, and `startLocation ==
   * endLocation`.
   */
  val destination: String,

  /** Where the trip ends. */
  val endLocation: String,

  /** When the trip started. */
  val startDateTime: KOffsetDateTime,

  /** When the trip ends. */
  val endDateTime: KOffsetDateTime,

  /** Transportation type, public or personal. */
  val transportType: TransportType,

  /** The purpose of the business trip. */
  val description: String,
  val createdAt: KOffsetDateTime,
  val updatedAt: KOffsetDateTime,

  /** Indicates whether the trip has been completed. A completed trip is **read-only**. */
  val completed: Boolean,

  // Optional fields for personal vehicle

  /** The brand of the vehicle used, e.g. Ford Focus MK2, a.k.a. The Gentleman's Vehicle. */
  val vehicleType: String?,

  /** Personal vehicle licence plate identifier. */
  val vehicleRegistration: String?,

  /** The mileage of the vehicle when the trip started. */
  val startMileage: String?,

  /** The mileage of the vehicle when the trip ended. */
  val endMileage: String?,
)

data class BonvoyageTripInsert(val id: KUUID, val trip: TripDetails)

@Serializable
data class BonvoyageTripUpdate(val id: KUUID, val trip: BonvoyageTripUpdateProperties)

@Serializable
data class BonvoyageTripUpdateProperties(
  val userFullName: String? = null,
  val startLocation: String? = null,
  val endLocation: String? = null,
  val startDateTime: KOffsetDateTime? = null,
  val endDateTime: KOffsetDateTime? = null,
  val description: String? = null,
  val transportType: TransportType? = null,

  // Optional fields for personal vehicle

  val vehicleType: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val vehicleRegistration: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val startMileage: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val endMileage: PropertyUpdate<String> = PropertyUpdate.Undefined,
)

/**
 * A single expense on a business trip. These are aggregated at the end and presented to the user
 * for review before finalizing the trip report.
 */
@Serializable
data class BonvoyageTravelExpense(
  /** Unique identifier for this expense. */
  val id: KUUID,

  /** The trip this expense belongs to. */
  val workflowId: KUUID,

  /** Amount of money spent on this expense. */
  val amount: Double,

  /** The currency of the expense. */
  val currency: String,

  /** The path to the image presented with the expense. */
  val imagePath: String,

  /** The storage provider for the image. */
  val imageProvider: String,

  /** Expense description. */
  val description: String,

  /**
   * Verification status. All expenses must be verified by the end user who sent them since the
   * expense data is auto-generated by LLMs.
   */
  val verified: Boolean,

  /** Date time of the expense, as indicated by the receipt. */
  val expenseCreatedAt: KOffsetDateTime,
  val createdAt: KOffsetDateTime,
  val updatedAt: KOffsetDateTime,
)

data class BonvoyageTravelExpenseInsert(
  val amount: Double,
  val currency: String,
  val description: String,
  val imagePath: String,
  val imageProvider: String?,
  val expenseCreatedAt: KOffsetDateTime,
)

@Serializable
data class BonvoyageTravelExpenseUpdate(
  val expenseId: KUUID,
  val properties: BonvoyageTravelExpenseUpdateProperties,
)

@Serializable
data class BonvoyageTravelExpenseUpdateProperties(
  val amount: PropertyUpdate<Double> = PropertyUpdate.Undefined,
  val currency: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val description: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val verified: PropertyUpdate<Boolean> = PropertyUpdate.Undefined,
  val expenseCreatedAt: PropertyUpdate<KOffsetDateTime> = PropertyUpdate.Undefined,
)

fun BonvoyageWorkflowsRecord.toTrip() =
  BonvoyageTrip(
    id = this.id!!,
    userId = this.userId,
    userFullName = this.userFullName,
    travelOrderId = this.travelOrderId,
    startLocation = this.startLocation,
    destination = this.destination,
    endLocation = this.endLocation,
    startDateTime = this.startDateTime,
    endDateTime = this.endDateTime,
    transportType = TransportType.valueOf(this.transportType),
    description = this.description,
    completed = this.completed == true,
    createdAt = this.createdAt!!,
    updatedAt = this.updatedAt!!,
    vehicleType = this.vehicleType,
    vehicleRegistration = this.vehicleRegistration,
    startMileage = this.startMileage,
    endMileage = this.endMileage,
    userAddress = "Adresa",
  )

fun BonvoyageTravelExpensesRecord.toTravelExpense() =
  BonvoyageTravelExpense(
    id = this.id!!,
    workflowId = this.workflowId,
    amount = this.amount,
    currency = this.currency,
    imagePath = this.imagePath,
    imageProvider = this.imageProvider,
    description = this.description,
    expenseCreatedAt = this.expenseCreatedAt,
    verified = this.verified == true,
    createdAt = this.createdAt!!,
    updatedAt = this.updatedAt!!,
  )
