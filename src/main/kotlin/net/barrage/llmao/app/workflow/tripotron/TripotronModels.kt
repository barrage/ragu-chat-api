package net.barrage.llmao.app.workflow.tripotron

import kotlinx.serialization.Serializable
import net.barrage.llmao.core.model.common.PropertyUpdate
import net.barrage.llmao.tables.records.TripotronTravelExpensesRecord
import net.barrage.llmao.tables.records.TripotronWorkflowsRecord
import net.barrage.llmao.types.KOffsetDateTime
import net.barrage.llmao.types.KUUID

/** A workflow entry with Tripotron. A Tripotron workflow is a wrapper around a business trip. */
data class TripotronTrip(
  /** Unique identifier for this workflow. */
  val id: KUUID,

  /** The user's ID, for the authorization server. */
  val userId: String,

  /** The full name (first + last) of the user who initiated the trip. */
  val userFullName: String,

  /** The travel order ID. Without this, trips cannot exist. */
  val travelOrderId: String,

  /** Where the trip started. */
  val startLocation: String,

  /** Where the trip ends. */
  val endLocation: String,

  /** When the trip started. */
  val startDateTime: KOffsetDateTime,

  /** When the trip ends. */
  val endDateTime: KOffsetDateTime,

  /** Transportation type, public or personal. */
  val transportType: TransportType,

  /** The purpose of the business trip. */
  val description: String,
  val createdAt: KOffsetDateTime,
  val updatedAt: KOffsetDateTime,

  // Optional fields for personal vehicle

  /** The brand of the vehicle used, e.g. Ford Focus MK2, a.k.a. The Gentleman's Vehicle. */
  val vehicleType: String?,

  /** Personal vehicle licence plate identifier. */
  val vehicleRegistration: String?,

  /** The mileage of the vehicle when the trip started. */
  val startMileage: String?,

  /** The mileage of the vehicle when the trip ended. */
  val endMileage: String?,
)

data class TripotronInsertTrip(val id: KUUID, val trip: TripDetails)

@Serializable data class TripotronUpdateTrip(val id: KUUID, val trip: TripotronUpdateTripPayload)

@Serializable
data class TripotronUpdateTripPayload(
  val userFullName: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val startLocation: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val endLocation: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val startDateTime: PropertyUpdate<KOffsetDateTime> = PropertyUpdate.Undefined,
  val endDateTime: PropertyUpdate<KOffsetDateTime> = PropertyUpdate.Undefined,
  val description: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val transportType: PropertyUpdate<TransportType> = PropertyUpdate.Undefined,

  // Optional fields for personal vehicle

  val vehicleType: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val vehicleRegistration: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val startMileage: PropertyUpdate<String> = PropertyUpdate.Undefined,
  val endMileage: PropertyUpdate<String> = PropertyUpdate.Undefined,
)

/**
 * A single expense on a business trip. These are aggregated at the end and presented to the user
 * for review before finalizing the trip report.
 */
data class TripotronTravelExpense(
  /** Unique identifier for this expense. */
  val id: KUUID,

  /** The trip this expense belongs to. */
  val workflowId: KUUID,

  /** Amount of money spent on this expense. */
  val amount: Double,

  /** The currency of the expense. */
  val currency: String,

  /** The path to the image presented with the expense. */
  val imagePath: String,

  /** The storage provider for the image. */
  val imageProvider: String,

  /** Expense description. */
  val description: String,

  /**
   * Verification status. All expenses must be verified by the end user who sent them since the
   * expense data is auto-generated by LLMs.
   */
  val verified: Boolean,
  val createdAt: KOffsetDateTime,
  val updatedAt: KOffsetDateTime,
)

fun TripotronWorkflowsRecord.toTrip() =
  TripotronTrip(
    id = this.id!!,
    userId = this.userId,
    userFullName = this.userFullName,
    travelOrderId = this.travelOrderId,
    startLocation = this.startLocation,
    endLocation = this.endLocation,
    startDateTime = this.startDateTime,
    endDateTime = this.endDateTime,
    transportType = TransportType.valueOf(this.transportType),
    description = this.description,
    createdAt = this.createdAt!!,
    updatedAt = this.updatedAt!!,
    vehicleType = this.vehicleType,
    vehicleRegistration = this.vehicleRegistration,
    startMileage = this.startMileage,
    endMileage = this.endMileage,
  )

fun TripotronTravelExpensesRecord.toTravelExpense() =
  TripotronTravelExpense(
    id = this.id!!,
    workflowId = this.workflowId,
    amount = this.amount,
    currency = this.currency,
    imagePath = this.imagePath,
    imageProvider = this.imageProvider,
    description = this.description,
    verified = this.verified!!,
    createdAt = this.createdAt!!,
    updatedAt = this.updatedAt!!,
  )
